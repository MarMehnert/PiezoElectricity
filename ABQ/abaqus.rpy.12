# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 6.13-3 replay file
# Internal Version: 2013_10_09-13.29.32 126623
# Run by iwtm80 on Wed Mar  7 09:37:54 2018
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=276.013336181641, 
    height=262.959991455078)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
s = mdb.models['Model-1'].ConstrainedSketch(name='__profile__', 
    sheetSize=200.0)
g, v, d, c = s.geometry, s.vertices, s.dimensions, s.constraints
s.setPrimaryObject(option=STANDALONE)
s.rectangle(point1=(0.0, 0.0), point2=(20.0, 25.0))
s.FixedConstraint(entity=g[5])
s.FixedConstraint(entity=g[2])
s.ObliqueDimension(vertex1=v[3], vertex2=v[0], textPoint=(8.82773971557617, 
    -4.08071517944336), value=1.0)
s.ObliqueDimension(vertex1=v[0], vertex2=v[1], textPoint=(-7.44600296020508, 
    7.21973419189453), value=1.0)
p = mdb.models['Model-1'].Part(name='Part-1', dimensionality=THREE_D, 
    type=DEFORMABLE_BODY)
p = mdb.models['Model-1'].parts['Part-1']
p.BaseSolidExtrude(sketch=s, depth=1.0)
s.unsetPrimaryObject()
p = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
del mdb.models['Model-1'].sketches['__profile__']
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p = mdb.models['Model-1'].parts['Part-1']
p.seedPart(size=0.1, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['Part-1']
p.generateMesh()
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON, mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((2000.0, 0.29), ))
mdb.models['Model-1'].HomogeneousSolidSection(name='Section-1', 
    material='Material-1', thickness=None)
session.viewports['Viewport: 1'].view.setValues(width=2.23767, height=1.30385, 
    viewOffsetX=0.00243225, viewOffsetY=-0.00254339)
p = mdb.models['Model-1'].parts['Part-1']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
region = p.Set(cells=cells, name='Set-1')
p = mdb.models['Model-1'].parts['Part-1']
p.SectionAssignment(region=region, sectionName='Section-1', offset=0.0, 
    offsetType=MIDDLE_SURFACE, offsetField='', 
    thicknessAssignment=FROM_SECTION)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
session.viewports['Viewport: 1'].view.setValues(width=2.23767, height=1.30385, 
    viewOffsetX=0.0198014, viewOffsetY=-0.0107582)
a = mdb.models['Model-1'].rootAssembly
a.DatumCsysByDefault(CARTESIAN)
p = mdb.models['Model-1'].parts['Part-1']
a.Instance(name='Part-1-1', part=p, dependent=ON)
session.viewports['Viewport: 1'].view.setValues(width=2.14906, height=1.25222, 
    viewOffsetX=-0.0193492, viewOffsetY=0.010543)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Step-1')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON, adaptiveMeshConstraints=OFF)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#10 ]', ), )
region = a.Set(faces=faces1, name='Set-1')
mdb.models['Model-1'].DisplacementBC(name='BC-1', createStepName='Step-1', 
    region=region, u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.83286, 
    farPlane=4.54639, width=2.23581, height=1.30277, cameraPosition=(-1.22556, 
    0.460277, 3.76145), cameraUpVector=(-0.189466, 0.856246, -0.480568), 
    cameraTarget=(0.522767, 0.467675, 0.547693), viewOffsetX=-0.0201303, 
    viewOffsetY=0.0109686)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#1 ]', ), )
region = a.Set(faces=faces1, name='Set-2')
mdb.models['Model-1'].DisplacementBC(name='BC-2', createStepName='Step-1', 
    region=region, u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.71614, 
    farPlane=4.68511, width=2.14369, height=1.24909, cameraPosition=(-0.908893, 
    -0.769447, 3.67813), cameraUpVector=(-0.502503, 0.81076, -0.300264), 
    cameraTarget=(0.52534, 0.463862, 0.546536), viewOffsetX=-0.0193009, 
    viewOffsetY=0.0105167)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#8 ]', ), )
region = a.Set(faces=faces1, name='Set-3')
mdb.models['Model-1'].DisplacementBC(name='BC-3', createStepName='Step-1', 
    region=region, u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.95417, 
    farPlane=4.44477, width=2.33156, height=1.35856, cameraPosition=(0.44171, 
    0.113186, 4.17913), cameraUpVector=(-0.367755, 0.893224, -0.258666), 
    cameraTarget=(0.544322, 0.466638, 0.539147), viewOffsetX=-0.0209924, 
    viewOffsetY=0.0114384)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.88381, 
    farPlane=4.53852, width=2.27603, height=1.3262, cameraPosition=(4.14371, 
    1.00404, 0.00536847), cameraUpVector=(-0.465021, 0.883415, 0.0577335), 
    cameraTarget=(0.554566, 0.465076, 0.466374), viewOffsetX=-0.0204924, 
    viewOffsetY=0.011166)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.72847, 
    farPlane=4.69051, width=2.15343, height=1.25477, cameraPosition=(3.07985, 
    1.10827, -2.09565), cameraUpVector=(-0.475219, 0.852098, 0.219307), 
    cameraTarget=(0.526978, 0.462055, 0.444077), viewOffsetX=-0.0193886, 
    viewOffsetY=0.0105645)
session.viewports['Viewport: 1'].view.setValues(width=2.11875, height=1.23456, 
    viewOffsetX=-0.021705, viewOffsetY=0.0114821)
a = mdb.models['Model-1'].rootAssembly
s1 = a.instances['Part-1-1'].faces
side1Faces1 = s1.getSequenceFromMask(mask=('[#20 ]', ), )
region = a.Surface(side1Faces=side1Faces1, name='Surf-1')
mdb.models['Model-1'].Pressure(name='Load-1', createStepName='Step-1', 
    region=region, distributionType=UNIFORM, field='', magnitude=100.0, 
    amplitude=UNSET)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.Job(name='Cube', model='Model-1', description='', type=ANALYSIS, 
    atTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90, 
    memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', multiprocessingMode=DEFAULT, numCpus=1, numGPUs=0)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       5
#: Number of Node Sets:          5
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
o7 = session.odbs['/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=o7)
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.57207, 
    farPlane=4.65379, width=2.07141, height=1.20698, cameraPosition=(2.63324, 
    2.5703, 2.63324), cameraUpVector=(-0.906761, -0.0838194, 0.41323), 
    cameraTarget=(0.520979, 0.458042, 0.520979))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.69772, 
    farPlane=4.54168, width=2.17261, height=1.26594, cameraPosition=(3.35822, 
    2.74856, 0.387571), cameraUpVector=(-0.219927, -0.191377, 0.95656), 
    cameraTarget=(0.511826, 0.455792, 0.549329))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.76542, 
    farPlane=4.66094, width=2.13895, height=1.24633, cameraPosition=(-2.79764, 
    -0.914991, -0.454655), cameraUpVector=(0.532341, 0.199874, -0.822596), 
    cameraTarget=(0.446592, 0.480045, 0.501284), viewOffsetX=-0.0219119, 
    viewOffsetY=0.0115915)
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(u1=0.0, u3=0.0)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.8691, 
    farPlane=4.61141, width=2.21915, height=1.29306, cameraPosition=(2.10608, 
    -2.87373, 0.670834), cameraUpVector=(-0.462693, 0.108986, -0.879794), 
    cameraTarget=(0.514805, 0.417593, 0.52928), viewOffsetX=-0.0227334, 
    viewOffsetY=0.0120261)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#4 ]', ), )
region = a.Set(faces=faces1, name='Set-4')
mdb.models['Model-1'].DisplacementBC(name='BC-4', createStepName='Step-1', 
    region=region, u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.74138, 
    farPlane=4.74126, width=2.12037, height=1.2355, cameraPosition=(-2.36537, 
    -0.461994, -1.70519), cameraUpVector=(0.81335, 0.167281, -0.557206), 
    cameraTarget=(0.419486, 0.504953, 0.461513), viewOffsetX=-0.0217214, 
    viewOffsetY=0.0114908)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          6
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].view.setValues(session.views['Bottom'])
session.viewports['Viewport: 1'].view.setValues(session.views['Right'])
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
session.viewports['Viewport: 1'].view.setValues(session.views['Bottom'])
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.73837, 
    farPlane=4.48213, width=1.73377, height=1.01024, cameraPosition=(3.93664, 
    -0.202383, -0.295139), cameraUpVector=(0.234116, -0.0140961, 0.972107), 
    cameraTarget=(0.5, 0.51941, 0.542986))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.77646, 
    farPlane=4.44404, width=1.75789, height=1.02429, cameraPosition=(3.92758, 
    -0.556735, 0.185851), cameraUpVector=(0.0987188, -0.0157777, 0.99499))
session.viewports['Viewport: 1'].view.setValues(session.views['Front'])
session.viewports['Viewport: 1'].view.setValues(session.views['Top'])
session.viewports['Viewport: 1'].view.setValues(session.views['Bottom'])
session.viewports['Viewport: 1'].view.setValues(session.views['Top'])
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
session.viewports['Viewport: 1'].view.setValues(session.views['Iso'])
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='RF', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].view.setValues(width=1.87509, height=1.09258, 
    viewOffsetX=0.00707352, viewOffsetY=0.00193529)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.82405, 
    farPlane=4.39459, width=1.73439, height=1.0106, cameraPosition=(-3.01683, 
    -0.270403, 0.355261), cameraUpVector=(-0.196128, 0.94151, -0.274029), 
    cameraTarget=(0.50136, 0.517396, 0.543945), viewOffsetX=0.00654278, 
    viewOffsetY=0.00179008)
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='S', outputPosition=INTEGRATION_POINT, refinement=(INVARIANT, 
    'Mises'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.83028, 
    farPlane=4.38834, width=1.73822, height=1.01283, cameraPosition=(-3.01628, 
    -0.273781, 0.359123), cameraUpVector=(-0.0994495, 0.628826, -0.77116), 
    cameraTarget=(0.501909, 0.514018, 0.547807), viewOffsetX=0.00655722, 
    viewOffsetY=0.00179403)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.81017, 
    farPlane=4.40882, width=1.72587, height=1.00563, cameraPosition=(-3.02387, 
    1.1485, 0.0792513), cameraUpVector=(0.217537, 0.819722, -0.529843), 
    cameraTarget=(0.499611, 0.514894, 0.545623), viewOffsetX=0.00651063, 
    viewOffsetY=0.00178128)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.81118, 
    farPlane=4.40781, width=1.72649, height=1.006, cameraPosition=(-3.02529, 
    1.14692, 0.0878137), cameraUpVector=(0.116225, -0.0822372, -0.989813), 
    cameraTarget=(0.498193, 0.513313, 0.554185), viewOffsetX=0.00651297, 
    viewOffsetY=0.00178192)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.91317, 
    farPlane=4.30731, width=1.78913, height=1.0425, cameraPosition=(-3.09963, 
    0.790891, 0.489028), cameraUpVector=(0.0235998, 0.0762622, -0.996808), 
    cameraTarget=(0.499332, 0.512915, 0.552965), viewOffsetX=0.00674925, 
    viewOffsetY=0.00184657)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.90773, 
    farPlane=4.31212, width=1.7858, height=1.04055, cameraPosition=(-3.09963, 
    0.790891, 0.506559), cameraTarget=(0.499332, 0.512915, 0.570496), 
    viewOffsetX=0.00673666, viewOffsetY=0.00184312)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.87879, 
    farPlane=4.33995, width=1.76802, height=1.0302, cameraPosition=(-3.07669, 
    0.0371763, 0.487727), cameraUpVector=(0.014413, 0.0654535, -0.997752), 
    cameraTarget=(0.501094, 0.513049, 0.570624), viewOffsetX=0.0066696, 
    viewOffsetY=0.00182477)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.83054, 
    farPlane=4.38377, width=1.7384, height=1.01293, cameraPosition=(-3.05172, 
    0.0010537, 0.183834), cameraUpVector=(0.101335, 0.0481424, -0.993687), 
    cameraTarget=(0.500998, 0.513101, 0.570939), viewOffsetX=0.00655782, 
    viewOffsetY=0.00179419)
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-3'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-4'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].loads['Load-1'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.Job(name='Cube_mm', model='Model-1', description='', type=ANALYSIS, 
    atTime=None, waitMinutes=0, waitHours=0, queue=None, memory=90, 
    memoryUnits=PERCENTAGE, getMemoryFromAnalysis=True, 
    explicitPrecision=SINGLE, nodalOutputPrecision=SINGLE, echoPrint=OFF, 
    modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, userSubroutine='', 
    scratch='', multiprocessingMode=DEFAULT, numCpus=1, numGPUs=0)
mdb.jobs['Cube_mm'].writeInput(consistencyChecking=OFF)
#: The job input file has been written to "Cube_mm.inp".
o7 = session.odbs['/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=o7)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=OFF, 
    engineeringFeatures=OFF, mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
elemType1 = mesh.ElemType(elemCode=C3D8, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)
elemType2 = mesh.ElemType(elemCode=C3D6, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D4, elemLibrary=STANDARD)
p = mdb.models['Model-1'].parts['Part-1']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
a = mdb.models['Model-1'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          6
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o7 = session.odbs['/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=o7)
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=0 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.odbs['/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb'].close()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          6
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.models['Model-1'].loads['Load-1'].resume()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].resume()
mdb.models['Model-1'].boundaryConditions['BC-3'].resume()
mdb.models['Model-1'].boundaryConditions['BC-4'].resume()
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.90623, 
    farPlane=4.57687, width=2.24788, height=1.3098, cameraPosition=(-3.10969, 
    0.872468, -0.411984), cameraUpVector=(0.547791, -0.111498, -0.829152), 
    cameraTarget=(0.419195, 0.537989, 0.493605), viewOffsetX=-0.0230276, 
    viewOffsetY=0.0121818)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          6
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].odbDisplay.setFrame(step=0, frame=1 )
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.60717, 
    farPlane=4.64923, width=2.09968, height=1.22345, cameraPosition=(3.22242, 
    2.70937, 1.52237), cameraUpVector=(-0.83351, 0.529585, -0.15748), 
    cameraTarget=(0.515138, 0.456663, 0.531992))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.85735, 
    farPlane=4.4807, width=2.30117, height=1.34085, cameraPosition=(4.09341, 
    0.186512, -0.120489), cameraUpVector=(-0.222819, 0.950701, 0.215684), 
    cameraTarget=(0.507855, 0.477759, 0.54573))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.9012, 
    farPlane=4.43606, width=2.33649, height=1.36143, cameraPosition=(4.14933, 
    0.263323, 0.264593), cameraUpVector=(-0.270544, 0.957248, 0.102385), 
    cameraTarget=(0.508015, 0.477978, 0.54683))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.6202, 
    farPlane=4.76201, width=2.11018, height=1.22957, cameraPosition=(3.00757, 
    -1.8261, -0.812283), cameraUpVector=(0.448649, 0.670484, 0.590902), 
    cameraTarget=(0.504873, 0.472227, 0.543866))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.67531, 
    farPlane=4.71855, width=2.15457, height=1.25543, cameraPosition=(-0.637849, 
    -1.11692, -2.57105), cameraUpVector=(0.902365, 0.407695, -0.139723), 
    cameraTarget=(0.472712, 0.478484, 0.52835))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.87667, 
    farPlane=4.55537, width=2.31674, height=1.34992, cameraPosition=(-3.09684, 
    -0.359302, 0.226136), cameraUpVector=(0.411494, 0.0734351, -0.908449), 
    cameraTarget=(0.447179, 0.486351, 0.557395))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.86349, 
    farPlane=4.56856, width=2.30612, height=1.34374, cameraPosition=(-3.09684, 
    -0.359302, 0.226136), cameraUpVector=(0.394222, 0.145422, -0.907437))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.81471, 
    farPlane=4.60819, width=2.26684, height=1.32085, cameraPosition=(-3.0424, 
    -0.0955036, -0.378565), cameraUpVector=(0.553065, 0.0955389, -0.827642), 
    cameraTarget=(0.448021, 0.490431, 0.548041))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.92755, 
    farPlane=4.50404, width=2.35772, height=1.3738, cameraPosition=(-3.16158, 
    -0.108732, 0.464142), cameraUpVector=(0.349368, 0.0810661, -0.933472), 
    cameraTarget=(0.446322, 0.490242, 0.560054))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.models['Model-1'].boundaryConditions['BC-4'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].boundaryConditions['BC-1'].resume()
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(u1=UNSET, u3=UNSET)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       6
#: Number of Node Sets:          6
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    SYMBOLS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U2'), )
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(u1=0.0, u3=0.0)
mdb.models['Model-1'].boundaryConditions['BC-4'].resume()
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.83323, 
    farPlane=4.64982, width=2.19142, height=1.2769, cameraPosition=(-2.80981, 
    2.2155, 0.180099), cameraUpVector=(0.414495, -0.10494, -0.903981), 
    cameraTarget=(0.437267, 0.562785, 0.511766), viewOffsetX=-0.0224492, 
    viewOffsetY=0.0118758)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#2 ]', ), )
region = a.Set(faces=faces1, name='Set-5')
mdb.models['Model-1'].DisplacementBC(name='BC-5', createStepName='Step-1', 
    region=region, u1=0.0, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.88773, 
    farPlane=4.59477, width=2.23358, height=1.30147, cameraPosition=(-0.786667, 
    4.01047, 0.361359), cameraUpVector=(0.15752, -0.338572, -0.927662), 
    cameraTarget=(0.497671, 0.588159, 0.513888), viewOffsetX=-0.0228811, 
    viewOffsetY=0.0121043)
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.87754, 
    farPlane=4.60603, width=2.2257, height=1.29688, cameraPosition=(-3.07119, 
    0.986035, 1.50622), cameraUpVector=(0.0874825, 0.0973258, -0.9914), 
    cameraTarget=(0.429009, 0.536855, 0.540894), viewOffsetX=-0.0228004, 
    viewOffsetY=0.0120616)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       7
#: Number of Node Sets:          7
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.55968, 
    farPlane=4.7106, width=2.06143, height=1.20116, cameraUpVector=(-0.372022, 
    0.54561, -0.750939), cameraTarget=(0.520979, 0.458042, 0.520979))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.84738, 
    farPlane=4.48376, width=2.29313, height=1.33617, cameraPosition=(4.06529, 
    0.685866, 1.3722), cameraUpVector=(-0.108902, 0.0245688, -0.993749), 
    cameraTarget=(0.511759, 0.470174, 0.529098))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.89527, 
    farPlane=4.50057, width=2.33171, height=1.35864, cameraPosition=(0.521262, 
    -3.11132, -0.254822), cameraUpVector=(0.344474, 0.514336, -0.785364), 
    cameraTarget=(0.504964, 0.462894, 0.525978))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.82174, 
    farPlane=4.56565, width=2.27249, height=1.32414, cameraPosition=(-2.93442, 
    1.85061, 0.695578), cameraUpVector=(0.25121, -0.159187, -0.954753), 
    cameraTarget=(0.468164, 0.515734, 0.536099))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U2'), )
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.74311, 
    farPlane=4.64627, width=2.20917, height=1.28724, cameraPosition=(-2.83057, 
    -0.190786, -0.902), cameraUpVector=(0.662393, 0.123861, -0.738846), 
    cameraTarget=(0.469152, 0.496304, 0.520894))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.94422, 
    farPlane=4.44191, width=2.37114, height=1.38162, cameraPosition=(-3.18085, 
    0.28747, 0.328487), cameraUpVector=(0.385822, 0.00563929, -0.922556), 
    cameraTarget=(0.465724, 0.500984, 0.532935))
session.viewports['Viewport: 1'].view.setValues(nearPlane=2.93159, 
    farPlane=4.45455, width=2.36097, height=1.37569, cameraPosition=(-3.18085, 
    0.28747, 0.328487), cameraUpVector=(0.382766, 0.0573587, -0.922063), 
    cameraTarget=(0.465724, 0.500984, 0.532935))
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=OFF)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p1 = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p = mdb.models['Model-1'].parts['Part-1']
p.features['Solid extrude-1'].setValues(depth=100.0)
p = mdb.models['Model-1'].parts['Part-1']
p.regenerate()
#: Warning: Failed to attach mesh to part geometry.
p = mdb.models['Model-1'].parts['Part-1']
p.features['Solid extrude-1'].setValues(depth=1.0)
p = mdb.models['Model-1'].parts['Part-1']
p.regenerate()
p = mdb.models['Model-1'].parts['Part-1']
p.regenerate()
p = mdb.models['Model-1'].parts['Part-1']
s1 = p.features['Solid extrude-1'].sketch
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=s1)
s2 = mdb.models['Model-1'].sketches['__edit__']
g, v, d, c = s2.geometry, s2.vertices, s2.dimensions, s2.constraints
s2.setPrimaryObject(option=SUPERIMPOSE)
p.projectReferencesOntoSketch(sketch=s2, 
    upToFeature=p.features['Solid extrude-1'], filter=COPLANAR_EDGES)
session.viewports['Viewport: 1'].view.setValues(nearPlane=18.4362, 
    farPlane=22.2651, width=16.7208, height=9.74291, cameraPosition=(-3.61762, 
    -1.23715, 20.8507), cameraTarget=(-3.61762, -1.23715, 0))
s2.unsetPrimaryObject()
del mdb.models['Model-1'].sketches['__edit__']
p = mdb.models['Model-1'].parts['Part-1']
p.features['Solid extrude-1'].setValues(depth=100.0)
p = mdb.models['Model-1'].parts['Part-1']
p.regenerate()
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
p = mdb.models['Model-1'].parts['Part-1']
p.generateMesh()
p = mdb.models['Model-1'].parts['Part-1']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Part-1']
p.seedPart(size=1.0, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['Part-1']
p.generateMesh()
p = mdb.models['Model-1'].parts['Part-1']
p.deleteMesh()
p = mdb.models['Model-1'].parts['Part-1']
p.seedPart(size=0.5, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['Part-1']
p.generateMesh()
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=28.4016, 
    farPlane=56.1678, width=1.77996, height=1.03715, viewOffsetX=0.0928612, 
    viewOffsetY=-0.0210328)
session.viewports['Viewport: 1'].view.setValues(session.views['Front'])
session.viewports['Viewport: 1'].view.setValues(session.views['Top'])
session.viewports['Viewport: 1'].view.setValues(session.views['Bottom'])
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
mdb.models['Model-1'].boundaryConditions.delete(('BC-1', 'BC-2', 'BC-3', 
    'BC-4', 'BC-5', ))
del mdb.models['Model-1'].loads['Load-1']
session.viewports['Viewport: 1'].view.setValues(nearPlane=190.663, 
    farPlane=209.377, width=100.339, height=58.4657, cameraUpVector=(0, 
    0.997423, 0.071741))
session.viewports['Viewport: 1'].view.setValues(nearPlane=186.744, 
    farPlane=213.296, width=98.2767, height=57.2641, cameraPosition=(-189.677, 
    60.3918, 34.0755), cameraUpVector=(0.29002, 0.950521, 0.11135), 
    cameraTarget=(0.499984, 0.499995, 50))
a = mdb.models['Model-1'].rootAssembly
s1 = a.instances['Part-1-1'].faces
side1Faces1 = s1.getSequenceFromMask(mask=('[#2 ]', ), )
region = a.Surface(side1Faces=side1Faces1, name='Surf-2')
mdb.models['Model-1'].Pressure(name='Load-1', createStepName='Step-1', 
    region=region, distributionType=UNIFORM, field='', magnitude=0.0001, 
    amplitude=UNSET)
session.viewports['Viewport: 1'].view.setValues(nearPlane=141.781, 
    farPlane=258.258, width=74.6145, height=43.4765, cameraPosition=(-21.6149, 
    5.09296, -148.74), cameraUpVector=(-0.357873, 0.931752, 0.061355), 
    cameraTarget=(0.499969, 0.5, 50))
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#20 ]', ), )
region = a.Set(faces=faces1, name='Set-6')
mdb.models['Model-1'].DisplacementBC(name='BC-1', createStepName='Step-1', 
    region=region, u1=0.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=192.141, 
    farPlane=207.897, width=101.117, height=58.9194, cameraPosition=(-199.13, 
    12.5363, 46.7391), cameraUpVector=(0.0595004, 0.997462, 0.0391115), 
    cameraTarget=(0.499943, 0.500001, 50))
session.viewports['Viewport: 1'].view.setValues(nearPlane=141.464, 
    farPlane=258.574, width=74.4479, height=43.3795, cameraPosition=(-5.22172, 
    13.0605, 249.542), cameraUpVector=(-0.450273, 0.890225, -0.0689472), 
    cameraTarget=(0.5, 0.500002, 50.0001))
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#10 ]', ), )
region = a.Set(faces=faces1, name='Set-7')
mdb.models['Model-1'].DisplacementBC(name='BC-2', createStepName='Step-1', 
    region=region, u1=UNSET, u2=UNSET, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].view.setValues(nearPlane=146.281, 
    farPlane=253.756, width=76.9831, height=44.8567, cameraPosition=(66.1103, 
    -18.2476, 238.02), cameraUpVector=(-0.39585, 0.889852, 0.226863), 
    cameraTarget=(0.500036, 0.499986, 50.0001))
session.viewports['Viewport: 1'].view.setValues(nearPlane=153.248, 
    farPlane=246.791, width=80.6496, height=46.9931, cameraPosition=(120.736, 
    -13.9101, 209.196), cameraUpVector=(-0.354527, 0.868521, 0.346385), 
    cameraTarget=(0.500065, 0.499988, 50.0001))
session.viewports['Viewport: 1'].view.setValues(nearPlane=143.968, 
    farPlane=256.07, width=75.7659, height=44.1474, cameraPosition=(31.9164, 
    26.1363, -145.866), cameraUpVector=(0.477445, 0.858117, 0.188894), 
    cameraTarget=(0.500015, 0.500013, 49.9999))
session.viewports['Viewport: 1'].view.setValues(nearPlane=143.759, 
    farPlane=256.28, width=75.6559, height=44.0833, cameraPosition=(-22.1803, 
    9.9138, -148.506), cameraUpVector=(0.541522, 0.840398, -0.0220203), 
    cameraTarget=(0.499983, 0.500004, 49.9999))
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Part-1-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#5 ]', ), )
region = a.Set(faces=faces1, name='Set-8')
mdb.models['Model-1'].DisplacementBC(name='BC-3', createStepName='Step-1', 
    region=region, u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=None)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       10
#: Number of Node Sets:          10
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U2'), )
session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
    deformationScaling=UNIFORM)
session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
    uniformScaleFactor=1)
session.viewports['Viewport: 1'].odbDisplay.commonOptions.setValues(
    deformationScaling=AUTO)
p = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
p = mdb.models['Model-1'].parts['Part-1']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
elemType1 = mesh.ElemType(elemCode=C3D20, elemLibrary=STANDARD)
elemType2 = mesh.ElemType(elemCode=C3D15, elemLibrary=STANDARD)
elemType3 = mesh.ElemType(elemCode=C3D10, elemLibrary=STANDARD)
p = mdb.models['Model-1'].parts['Part-1']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
a = mdb.models['Model-1'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       10
#: Number of Node Sets:          10
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U2'), )
session.viewports['Viewport: 1'].view.setValues(session.views['Bottom'])
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Cube'].submit(consistencyChecking=OFF)
#: The job input file "Cube.inp" has been submitted for analysis.
#: Job Cube: Analysis Input File Processor completed successfully.
#: Job Cube: Abaqus/Standard completed successfully.
#: Job Cube completed successfully. 
o3 = session.openOdb(
    name='/calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb')
#: Model: /calculate/iwtm80/GitHub/PiezoElectricity/ABQ/Cube.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     1
#: Number of Meshes:             1
#: Number of Element Sets:       10
#: Number of Node Sets:          10
#: Number of Steps:              1
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    CONTOURS_ON_DEF, ))
session.viewports['Viewport: 1'].view.setValues(session.views['Left'])
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(INVARIANT, 
    'Magnitude'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U3'), )
session.viewports['Viewport: 1'].odbDisplay.setPrimaryVariable(
    variableLabel='U', outputPosition=NODAL, refinement=(COMPONENT, 'U2'), )
session.viewports['Viewport: 1'].viewportAnnotationOptions.setValues(
    legendFont='-*-nimbus sans l-medium-r-normal-*-*-120-*-*-p-*-*-*')
