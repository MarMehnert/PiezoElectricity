# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(30.0, 5.0))
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    13.1264686584473, -10.5156917572021), value=100.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -15.4293556213379, 1.49103164672852), value=1.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseSolidExtrude(depth=20.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].features['Solid extrude-1'].setValues(
    depth=1.0)
mdb.models['Model-1'].parts['Part-1'].regenerate()
mdb.models['Model-1'].parts['Part-1'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Part-1'].edges[5], point=
    mdb.models['Model-1'].parts['Part-1'].InterestingPoint(
    mdb.models['Model-1'].parts['Part-1'].edges[5], MIDDLE))
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((1.0, 0.1), ))
mdb.models['Model-1'].Material(name='Material-2')
mdb.models['Model-1'].materials['Material-2'].Elastic(table=((2.0, 0.2), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-2', name=
    'Section-2', thickness=None)
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', 
    ), ), name='Set-2')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['Set-2'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, 
    getMemoryFromAnalysis=True, historyPrint=OFF, memory=90, memoryUnits=
    PERCENTAGE, model='Model-1', modelPrint=OFF, multiprocessingMode=DEFAULT, 
    name='Cantilever', nodalOutputPrecision=SINGLE, numCpus=1, numDomains=1, 
    parallelizationMethodExplicit=DOMAIN, queue=None, scratch='', type=ANALYSIS
    , userSubroutine='', waitHours=0, waitMinutes=0)
# Save by iwtm80 on 2018_02_14-09.39.50; build 6.13-3 2013_10_09-13.29.32 126623
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-1'].deleteMesh()
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#100 ]', 
    ), ), number=400)
mdb.models['Model-1'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#80 ]', 
    ), ), number=1)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#100 ]', 
    ), ), number=800)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#2 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#100 ]', 
    ), ), number=250)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by iwtm80 on 2018_02_15-08.07.39; build 6.13-3 2013_10_09-13.29.32 126623
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((2000.0, 
    0.3), ))
mdb.models['Model-1'].materials['Material-2'].elastic.setValues(table=((2000.0, 
    0.3), ))
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#2000 ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#30 ]', ), ), name='Set-1')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'])
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#3 ]', 
    ), ))
mdb.models['Model-1'].parts['Part-1'].DatumPointByCoordinate(coords=(90.0, 0.0, 
    0.0))
mdb.models['Model-1'].parts['Part-1'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#3 ]', 
    ), ), normal=mdb.models['Model-1'].parts['Part-1'].edges[11], point=
    mdb.models['Model-1'].parts['Part-1'].datums[11])
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#40000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
# Save by iwtm80 on 2018_02_16-13.21.10; build 6.13-3 2013_10_09-13.29.32 126623
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6362085342407})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 16 13:21:51 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].loads['Load-1'].suppress()
mdb.models['Model-1'].rootAssembly.Set(name='Set-2', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    ('[#20200 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf3=-0.005, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-2'])
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6362390518188})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 16 13:25:06 2018', 'jobName': 'Cantilever'})
del mdb.models['Model-1'].loads['Load-2']
mdb.models['Model-1'].loads['Load-1'].resume()
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=0.0001)
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6362085342407})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 16 14:08:15 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].materials['Material-1'].elastic.setValues(table=((2000.0, 
    0.29), ))
mdb.models['Model-1'].materials['Material-2'].elastic.setValues(table=((2000.0, 
    0.29), ))
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6362085342407})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 16 14:41:56 2018', 'jobName': 'Cantilever'})
# Save by iwtm80 on 2018_02_16-15.10.38; build 6.13-3 2013_10_09-13.29.32 126623
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=1e-05)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#298e8 ]', ), ), name='Set-3')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-3'], u1=UNSET, 
    u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6590967178345})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 20 11:05:41 2018', 'jobName': 'Cantilever'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#40004 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=1e-05, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-2'])
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.6590967178345})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 20 11:18:19 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#f ]', 
    ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 32.662034034729})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 20 12:38:18 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask((
    '[#f ]', ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 83.3666152954102})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 20 12:40:51 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].steps['Step-1'].setValues(nlgeom=ON)
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 83.3666152954102})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 20 12:45:00 2018', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 83.3666152954102})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 21 10:15:05 2018', 'jobName': 'Cantilever'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=0.0001)
mdb.jobs['Cantilever'].submit(consistencyChecking=OFF)
mdb.jobs['Cantilever']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': '/calculate/iwtm80/DEAL_II/piezo_electricity/ABQ/Cantilever.odb', 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'fautm106', 'handle': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 0.0, 'attempts': 0, 
    'timeIncrement': 1.0, 'increment': 0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Cantilever']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Cantilever', 'memory': 83.3666152954102})
mdb.jobs['Cantilever']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Cantilever', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Cantilever']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Cantilever'})
mdb.jobs['Cantilever']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 21 10:43:54 2018', 'jobName': 'Cantilever'})
# Save by iwtm80 on 2018_02_21-10.44.18; build 6.13-3 2013_10_09-13.29.32 126623
